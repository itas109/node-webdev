---
swagger: "2.0"
info:
  description: "Swagger Demo - https://github.com/itas109/node-webdev"
  version: "1.0.0"
  title: "Swagger Demo"
  termsOfService: "https://github.com/itas109/node-webdev"
  contact:
    name: "itas109"
    email: "itas109@qq.com"
  license:
    name: "MIT License"
    url: "https://opensource.org/licenses/mit/"
host: "127.0.0.1:8080"
basePath: "/v1"
tags:
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "user external docs"
    url: "https://github.com/itas109"
schemes:
- "http"
- "https"
paths:
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "userLoginGET"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "username"
        in: "query"
        description: "user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "user password for login"
        required: true
        type: "string"
      responses:
        200:
          description: "json, {\"code\":0,\"message\":\"success\",\"data\":[{\"token_type\"\
            :\"bearer\",\"access_token\":\"adcc4dc09a4f9ac278d019605f00f33c9a08e0e3\"\
            ,\"expires_in\":3600,\"refresh_token\":\"418470a87cb3d9320a092bb550790ae2c13182f1\"\
            }]}"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "Invalid username/password"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-swagger-router-controller: "User"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "userUsernameGET"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "Invalid username"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
        404:
          description: "User not found"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      security:
      - user_auth:
        - "write:user"
        - "read:user"
      - token: []
      - BasicAuth: []
      x-swagger-router-controller: "User"
  /user/resetPassword:
    post:
      tags:
      - "user"
      summary: "reset password with body"
      description: "reset password with body {\"userId\":1, \"oldPwd\":\"xxx\",\"\
        newPwd\":\"xxx\"}"
      operationId: "userResetPasswordPOST"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Body"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "Invalid parameter"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
        404:
          description: "User not found"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-swagger-router-controller: "User"
securityDefinitions:
  user_auth:
    type: "oauth2"
    authorizationUrl: "localhost:8080/oauth/token"
    flow: "implicit"
    scopes:
      write:user: "modify user in your account"
      read:user: "read your user"
  token:
    description: "Authorization: Bearer xxx"
    type: "apiKey"
    name: "Authorization"
    in: "header"
  BasicAuth:
    type: "basic"
definitions:
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
        description: "System Level Code:\n 0 success \n 100101 system inner error\
          \ \n 100201 interface maintenance \n 200202 interface disabled \n\n Service\
          \ Level Code:\n 200101 input params empty \n 200102 input params error \n\
          \ 200103 no auth"
      message:
        type: "string"
        description: "code details information"
      data:
        type: "string"
        description: "return datas array when code equal 0"
    example:
      code: 0
      message: "success"
      data:
      - xxx: "xxx"
  ApiErrorResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
        description: "System Level Code:\n 0 success \n 100101 system inner error\
          \ \n 100201 interface maintenance \n 200202 interface disabled \n\n Service\
          \ Level Code:\n 200101 input params empty \n 200102 input params error \n\
          \ 200103 no auth"
      message:
        type: "string"
        description: "code details information"
    example:
      code: 200102
      message: "input params error"
  Body:
    type: "object"
    properties:
      self-defined:
        type: "string"
        description: "any self-defined object"
externalDocs:
  description: "external docs"
  url: "https://github.com/itas109"
